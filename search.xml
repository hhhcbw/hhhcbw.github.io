<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C_note_1</title>
      <link href="/2021/10/27/C-note-1/"/>
      <url>/2021/10/27/C-note-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这个系列主要是我学习《C和指针》这本书的一些笔记，主要关于一些小的细节，目的是供自己学习和参考，详细地部分建议大家可以阅读一下《C和指针》这本书</p></blockquote><h1 id="一般情况"><a href="#一般情况" class="headerlink" title="一般情况"></a>一般情况</h1><p>我们在编程的过程中，可能会遇到一种量，它的值不会被改变，或者说我们不希望在之后的代码执行过程中改变这个值。<strong>C</strong> 中通过引入 <code>const</code> 修饰符来表示这种量，即常量。如果在代码的执行过程中修改了常量，那么编译器就会报错（暂且算是一种对数据自动的保护机制吧）。</p><span id="more"></span><p><strong>例如</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100</span>; <span class="comment">//定义一个值为100的常量</span></span><br></pre></td></tr></table></figure><hr><h1 id="和指针联用"><a href="#和指针联用" class="headerlink" title="和指针联用"></a>和指针联用</h1><p>一般情况非常容易理解，但 <code>const</code> 修饰符也可以和指针联用来达到一些目的，会有以下三种情况</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> * point1;</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">const</span> * point2;</span><br><span class="line"><span class="keyword">int</span> * <span class="keyword">const</span> point3;</span><br></pre></td></tr></table></figure><p>前面两种情况即 <code>point1</code> 和 <code>point2</code> 都表示指针指向的数据是只读的，但指针本身是可以更改的（改变其指向的地址）<br>最后一种情况，即 <code>point3</code> 表示指针本身是只读的（不可以改变其指向的地址），但指针指向的数据的值是可以改变的。<br><strong>一个具体的栗子</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> * point1;</span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">const</span> * point2;</span><br><span class="line">    <span class="keyword">int</span> * <span class="keyword">const</span> point3 = &amp;b;</span><br><span class="line">    *point3 = <span class="number">101</span>;</span><br><span class="line">    point1 = &amp;a;</span><br><span class="line">    <span class="comment">// *point1 = 101; // 报错</span></span><br><span class="line">    b = <span class="number">101</span>;</span><br><span class="line">    <span class="comment">// point3 = &amp;c; // 报错</span></span><br><span class="line">    <span class="keyword">int</span> * <span class="keyword">const</span> point4 = &amp;a; <span class="comment">// 如果指向一个常量那么可以通过指针修改这个常量</span></span><br><span class="line">    *point4 = <span class="number">101</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *point4); <span class="comment">// 输出 101</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a); <span class="comment">//输出 101</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>还可以用两个 <code>const</code> 表示一个指向常量的只读指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> * <span class="keyword">const</span> point5;</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">const</span> * <span class="keyword">const</span> point6;</span><br></pre></td></tr></table></figure><hr><h1 id="const和函数形参"><a href="#const和函数形参" class="headerlink" title="const和函数形参"></a>const和函数形参</h1><p><code>const</code> 通常用在函数形参中，如果形参是一个指针，为了防止在指针内部修改指针指向的数据，就可以用 <code>const</code> 来限制<br><strong>例如C语言标准库，有很多参数的形参被const限制</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">strlen</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> * str )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strcmp</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> * str1, <span class="keyword">const</span> <span class="keyword">char</span> * str2 )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">strcat</span> <span class="params">( <span class="keyword">char</span> * destination, <span class="keyword">const</span> <span class="keyword">char</span> * source )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">strcpy</span> <span class="params">( <span class="keyword">char</span> * destination, <span class="keyword">const</span> <span class="keyword">char</span> * source )</span></span>;</span><br></pre></td></tr></table></figure><p>自己也可以使用 <code>const</code> 来限制形参。<br><strong>一个具体的栗子</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">output</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> * a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// *a = 101; // 报错</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *a); <span class="comment">// 输出 100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">100</span>;</span><br><span class="line">    output(&amp;b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="const-和-非const-类型转换"><a href="#const-和-非const-类型转换" class="headerlink" title="const 和 非const 类型转换"></a>const 和 非const 类型转换</h1><p>当一个指针变量 <code>point1</code> 被 <code>const</code> 限制时，并且类似 <code>const int *point1</code> 这种形式，说明指针指向的数据不能被修改；如果将 <code>point1</code> 赋值给另外一个未被 <code>const</code> 修饰的指针变量 <code>point2</code>，就有可能发生危险。因为通过 <code>point1</code> 不能修改数据，而赋值后通过 <code>point2</code> 能够修改数据了，意义发生了转变，所以编译器不提倡这种行为，会给出错误或警告 (实测有的编译器并不会给出警报和错误，并且能正常运行，比如CB)。<br>也就是说，<code>const int * </code> 和 <code>int *</code> 是不同的类型，不能将 <code>const int *</code> 类型的数据赋值给 <code>int *</code> 类型的变量。但反过来是可以的，编译器允许将 <code>int *</code> 类型的数据赋值给 <code>const int *</code> 类型的变量。<br>这种限制很容易理解，<code>int *</code> 指向的数据有读取和写入权限，而 <code>const int *</code> 指向的数据只有读取权限，降低数据的权限不会带来任何问题，但提升数据的权限就有可能发生危险。<br>C语言标准库中很多函数的参数都被 <code>const</code> 限制了，但我们在以前的编码过程中并没有注意这个问题，经常将非 <code>const</code> 类型的数据传递给 <code>const</code> 类型的形参，这样做从未引发任何副作用，原因就是上面讲到的，将非 <code>const</code> 类型转换为 <code>const</code> 类型是允许的。</p><hr><p><strong>下面是一个将 const 类型赋值给非 const 类型的例子：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> * point2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    *point2 = <span class="number">101</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *point2); <span class="comment">//输出101</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> b = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> * point1 = &amp;b;</span><br><span class="line">    output(point1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, b); <span class="comment">//输出101</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><strong>参考博客</strong><br><a href="http://c.biancheng.net/view/2041.html">C语言const的用法详解，C语言常量定义详解</a></p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C, C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(=^_^=)</title>
      <link href="/2021/10/27/Welcom/"/>
      <url>/2021/10/27/Welcom/</url>
      
        <content type="html"><![CDATA[<h1 id="Welcom-to-my-blog-site"><a href="#Welcom-to-my-blog-site" class="headerlink" title="Welcom to my blog site !"></a>Welcom to my blog site !</h1>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
